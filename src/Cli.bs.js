// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Path from "path";
import * as Js_exn from "@rescript/std/lib/es6/js_exn.js";
import * as Js_dict from "@rescript/std/lib/es6/js_dict.js";
import * as Js_json from "@rescript/std/lib/es6/js_json.js";
import * as Caml_option from "@rescript/std/lib/es6/caml_option.js";
import * as Files from "@sveltejs/app-utils/files";

function getFile(filepath) {
  if (Fs.existsSync(filepath)) {
    return Fs.readFileSync(filepath, "utf8");
  } else {
    return Js_exn.raiseError("File " + filepath + " does not exist.");
  }
}

function getSiteConfiguration(param) {
  return {
          public: "hello"
        };
}

function getRewriteConfiguration(firebaseJsonFilePath, hostingSite, sourceRewriteMatch) {
  var json;
  try {
    json = JSON.parse(getFile(firebaseJsonFilePath));
  }
  catch (exn){
    json = Js_exn.raiseError("Error parsing Firebase Configuration " + firebaseJsonFilePath + ". Invalid JSON.");
  }
  var value = Js_json.classify(json);
  if (typeof value === "number") {
    return Js_exn.raiseError(firebaseJsonFilePath + " error. Expected root level JSON to be an object.");
  }
  if (value.TAG !== /* JSONObject */2) {
    return Js_exn.raiseError(firebaseJsonFilePath + " error. Expected root level JSON to be an object.");
  }
  var hostingConfig = Js_dict.get(value._0, "hosting");
  if (hostingConfig === undefined) {
    return Js_exn.raiseError(firebaseJsonFilePath + " error. Expected \"hosting\" property.");
  }
  var hostingConfig$1 = Js_json.decodeArray(Caml_option.valFromOption(hostingConfig));
  var hosting = hostingConfig$1 !== undefined ? hostingConfig$1 : Js_exn.raiseError(firebaseJsonFilePath + " error. Expected \"hosting\" property to be \"array\". Try wrapping your \"hosting\" object in an array [].");
  var matchedSite;
  if (hostingSite !== undefined) {
    var site = Caml_option.valFromOption(hostingSite);
    var hostingSite$1 = hosting.filter(function (item, index) {
            var i = Js_json.decodeObject(item);
            if (i === undefined) {
              return Js_exn.raiseError(firebaseJsonFilePath + " error. Hosting item was not a valid JSON Object.");
            }
            var siteConfig = Js_dict.get(Caml_option.valFromOption(i), "site");
            if (siteConfig !== undefined) {
              return Caml_option.valFromOption(siteConfig) === site;
            } else {
              return Js_exn.raiseError(firebaseJsonFilePath + " error. Hosting item as position " + String(index) + " does not have required \"site\" field.");
            }
          }).shift();
    matchedSite = hostingSite$1 !== undefined ? hostingSite$1 : Js_exn.raiseError(firebaseJsonFilePath + " error. No \"hosting[].site\" match for " + JSON.stringify(site) + ".");
  } else {
    var hostingSite$2 = hosting.shift();
    matchedSite = hostingSite$2 !== undefined ? hostingSite$2 : Js_exn.raiseError(firebaseJsonFilePath + " error. \"hosting.[]\" is an empty array. At least one hosting site config required.");
  }
  var siteConfig = Js_json.decodeObject(matchedSite);
  if (siteConfig === undefined) {
    return Js_exn.raiseError(firebaseJsonFilePath + " error. Hosting match is not a valid JSON object.");
  }
  var rewriteRules = Js_dict.get(Caml_option.valFromOption(siteConfig), "rewrites");
  if (rewriteRules === undefined) {
    return Js_exn.raiseError(firebaseJsonFilePath + " error. Hosting config does not have required \"rewrites\":[] field.");
  }
  var rules = Js_json.decodeArray(Caml_option.valFromOption(rewriteRules));
  if (rules === undefined) {
    return Js_exn.raiseError(firebaseJsonFilePath + " error. Hosting config \"rewrites\":[] field is not an array.");
  }
  var rule = rules.find(function (item, index) {
        var rule = Js_json.decodeObject(item);
        if (rule === undefined) {
          return Js_exn.raiseError(firebaseJsonFilePath + " error. \"rewrites\" item at position " + String(index) + " is not an object");
        }
        var rule$1 = Caml_option.valFromOption(rule);
        var source = Js_dict.get(rule$1, "source");
        if (source === undefined) {
          return Js_exn.raiseError(firebaseJsonFilePath + " error. Missing \"source\" field in rewrite rules.");
        }
        if (sourceRewriteMatch !== Caml_option.valFromOption(source)) {
          return false;
        }
        var run = Js_dict.get(rule$1, "run");
        if (run !== undefined) {
          return true;
        } else {
          return Js_dict.get(rule$1, "function") !== undefined;
        }
      });
  if (rule !== undefined) {
    return JSON.parse(JSON.stringify(rule));
  } else {
    return Js_exn.raiseError(firebaseJsonFilePath + " error. No rewrites item matching \"source\":\"" + JSON.stringify(sourceRewriteMatch) + "\". The rule must contain either \"function\":\"\" or \"run\":{} configuration as well.");
  }
}

function adapt(builder, adapterConfigOpt, param) {
  var adapterConfig = adapterConfigOpt !== undefined ? Caml_option.valFromOption(adapterConfigOpt) : ({});
  var config = Object.assign({
        cloudRunBuildDir: undefined,
        firebaseJson: "firebase.json",
        hostingSite: undefined,
        sourceRewriteMatch: "**"
      }, adapterConfig);
  var rewriteConfiguration = getRewriteConfiguration(config.firebaseJson, config.hostingSite, config.sourceRewriteMatch);
  var run = rewriteConfiguration.run;
  if (run !== undefined) {
    console.log("Cloud Run configuration", run);
    var dir = config.cloudRunBuildDir;
    var serverOutputDir = dir !== undefined ? Path.join(Caml_option.valFromOption(dir)) : Path.join(run.serviceId);
    console.log("Writing Cloud Run service to ./" + serverOutputDir);
    builder.copy_server_files(serverOutputDir);
    var dirname = typeof __dirname === "undefined" ? undefined : __dirname;
    var dirname$1 = dirname !== undefined ? dirname : Js_exn.raiseError("FATAL");
    Files.copy(Path.join(dirname$1, "./files"), serverOutputDir, undefined);
    console.log("To deploy your Cloud Run service, run this command:\n+--------------------------------------------------+\ngcloud beta run --platform managed --region us-central1 deploy " + run.serviceId + " --source " + serverOutputDir + " --allow-unauthenticated\n+--------------------------------------------------+");
  }
  var staticOutputDir = Path.join("hello");
  console.log("Writing client application to " + staticOutputDir);
  builder.copy_static_files(staticOutputDir);
  builder.copy_client_files(staticOutputDir);
  console.log("Prerendering static pages to " + staticOutputDir);
  return builder.prerender({
              force: false,
              dest: staticOutputDir
            });
}

var $$default = adapt;

export {
  getFile ,
  getSiteConfiguration ,
  getRewriteConfiguration ,
  adapt ,
  $$default ,
  $$default as default,
  
}
/* fs Not a pure module */
