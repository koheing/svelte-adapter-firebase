// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Js_exn from "@rescript/std/lib/es6/js_exn.js";
import * as Js_dict from "@rescript/std/lib/es6/js_dict.js";
import * as Js_json from "@rescript/std/lib/es6/js_json.js";
import * as Caml_option from "@rescript/std/lib/es6/caml_option.js";

function getFile(filepath) {
  if (Fs.existsSync(filepath)) {
    return Fs.readFileSync(filepath, "utf8");
  } else {
    return Js_exn.raiseError("File " + filepath + " does not exist.");
  }
}

function adapter(builder, adapterConfigOpt, param) {
  var adapterConfig = adapterConfigOpt !== undefined ? Caml_option.valFromOption(adapterConfigOpt) : ({});
  var config = Object.assign({
        hostingSite: undefined,
        sourceRewriteMatch: "**",
        firebaseJson: "firebase.json",
        cloudRunBuildDir: undefined
      }, adapterConfig);
  console.log("config", config);
  var json;
  try {
    json = JSON.parse(getFile(config.firebaseJson));
  }
  catch (exn){
    json = Js_exn.raiseError("Error parsing Firebase Configuration " + config.firebaseJson + ". Invalid JSON.");
  }
  var value = Js_json.classify(json);
  var rewriteConfiguration;
  if (typeof value === "number") {
    rewriteConfiguration = Js_exn.raiseError(config.firebaseJson + " error. Expected root level JSON to be an object.");
  } else if (value.TAG === /* JSONObject */2) {
    var hostingConfig = Js_dict.get(value._0, "hosting");
    if (hostingConfig !== undefined) {
      var hostingConfig$1 = Js_json.decodeArray(Caml_option.valFromOption(hostingConfig));
      var hosting = hostingConfig$1 !== undefined ? hostingConfig$1 : Js_exn.raiseError(config.firebaseJson + " error. Expected \"hosting\" property to be \"array\". Try wrapping your \"hosting\" object in an array [].");
      var site = config.hostingSite;
      var matchedSite;
      if (site !== undefined) {
        var site$1 = Caml_option.valFromOption(site);
        var hostingSite = hosting.filter(function (item, index) {
                var i = Js_json.decodeObject(item);
                if (i === undefined) {
                  return Js_exn.raiseError(config.firebaseJson + " error. Hosting item was not a valid JSON Object.");
                }
                var siteConfig = Js_dict.get(Caml_option.valFromOption(i), "site");
                if (siteConfig !== undefined) {
                  return Caml_option.valFromOption(siteConfig) === site$1;
                } else {
                  return Js_exn.raiseError(config.firebaseJson + " error. Hosting item as position " + String(index) + " does not have required \"site\" field.");
                }
              }).shift();
        matchedSite = hostingSite !== undefined ? hostingSite : Js_exn.raiseError(config.firebaseJson + " error. No \"hosting[].site\" match for " + config.hostingSite + ".");
      } else {
        var hostingSite$1 = hosting.shift();
        matchedSite = hostingSite$1 !== undefined ? hostingSite$1 : Js_exn.raiseError(config.firebaseJson + " error. \"hosting.[]\" is an empty array. At least one hosting site config required.");
      }
      var siteConfig = Js_json.decodeObject(matchedSite);
      if (siteConfig !== undefined) {
        var rewriteRules = Js_dict.get(Caml_option.valFromOption(siteConfig), "rewrites");
        if (rewriteRules !== undefined) {
          var rules = Js_json.decodeArray(Caml_option.valFromOption(rewriteRules));
          if (rules !== undefined) {
            var rule = rules.find(function (item, index) {
                  var rule = Js_json.decodeObject(item);
                  if (rule === undefined) {
                    return Js_exn.raiseError(config.firebaseJson + " error. \"rewrites\" item at position " + String(index) + " is not an object");
                  }
                  var rule$1 = Caml_option.valFromOption(rule);
                  var source = Js_dict.get(rule$1, "source");
                  if (source === undefined) {
                    return Js_exn.raiseError(config.firebaseJson + " error. Missing \"source\" field in rewrite rules.");
                  }
                  var source$1 = Caml_option.valFromOption(source);
                  console.log("config.sourceRewriteMatch", config.sourceRewriteMatch);
                  console.log("source", source$1);
                  if (config.sourceRewriteMatch !== source$1) {
                    return false;
                  }
                  var run = Js_dict.get(rule$1, "run");
                  if (run !== undefined) {
                    return true;
                  } else {
                    return Js_dict.get(rule$1, "function") !== undefined;
                  }
                });
            rewriteConfiguration = rule !== undefined ? rule : Js_exn.raiseError(config.firebaseJson + " error. No rewrites item matching \"source\":\"" + JSON.stringify(config.sourceRewriteMatch) + "\". The rule must contain either \"function\":\"\" or \"run\":{} configuration as well.");
          } else {
            rewriteConfiguration = Js_exn.raiseError(config.firebaseJson + " error. Hosting config \"rewrites\":[] field is not an array.");
          }
        } else {
          rewriteConfiguration = Js_exn.raiseError(config.firebaseJson + " error. Hosting config does not have required \"rewrites\":[] field.");
        }
      } else {
        rewriteConfiguration = Js_exn.raiseError(config.firebaseJson + " error. Hosting match is not a valid JSON object.");
      }
    } else {
      rewriteConfiguration = Js_exn.raiseError(config.firebaseJson + " error. Expected \"hosting\" property.");
    }
  } else {
    rewriteConfiguration = Js_exn.raiseError(config.firebaseJson + " error. Expected root level JSON to be an object.");
  }
  console.log("rewriteConfiguration", rewriteConfiguration);
  
}

var $$default = adapter;

export {
  getFile ,
  adapter ,
  $$default ,
  $$default as default,
  
}
/* fs Not a pure module */
